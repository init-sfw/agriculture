package ar.com.init.agros.reporting.components;

import ar.com.init.agros.reporting.AbstractReport;
import ar.com.init.agros.util.gui.AbstractEventControl;
import ar.com.init.agros.util.gui.GUIUtility;
import ar.com.init.agros.util.gui.validation.components.FrameNotifier;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;

/*
 * Clase GUI ReportFrame
 * Especie de wizard para generar reportes.
 * La ultima pestaña es un GenerateReportPanel.
 * El resto de las pestañas pueden ser Paneles comunes.
 * O ReportCriteria si necesitan validar valores ingresados.
 * Seria conveniente usar siempre ReportCriteria para usar el clear, aunque no tenga que validar (retornando siempre true en validateSelection)
 *
 * Cuando se selecciona una pestaña o se aprieta aceptar, se pasa a la siguiente pestaña previa validacion si aplica.
 *
 * @author gmatheu
 * @version 07/07/2009
 */
public abstract class ReportFrame extends javax.swing.JFrame
{

    private static final long serialVersionUID = -1L;
    protected boolean validate;
    protected boolean generateChart;

    /** Crea una nueva GUI tipo ReportFrame */
    public ReportFrame()
    {
        generateChart = false;
        validate = false;

        GUIUtility.initWindow(this);
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        generateReportPanel.setFrameNotifier(frameNotifier);

        oKCancelCleanPanel.setOwner(this);
        oKCancelCleanPanel.setListenerToButtons(new EventControl());

    }

    public GenerateReportPanel getGenerateReportPanel()
    {
        return generateReportPanel;
    }

    private class EventControl extends AbstractEventControl
    {

        @Override
        public FrameNotifier getFrameNotifier()
        {
            return frameNotifier;
        }

        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (e.getSource() == oKCancelCleanPanel.getBtnAceptar()) {
                jTabbedPane.setSelectedIndex(jTabbedPane.getSelectedIndex() + 1);
            }
            else if (e.getSource() == oKCancelCleanPanel.getBtnCancelar()) {
                ReportFrame.this.closeWindow();
            }
            else if (e.getSource() == oKCancelCleanPanel.getBtnClean()) {
                ReportFrame.this.clean();
            }
        }
    }

    /**
     * Valida y mueve a la siguiente pestaña.
     * En caso de no ser valido, se mueve a la primera pestaña no valida.
     *
     */
    public boolean validateTabs()
    {
        validate = false;
        boolean b = true;
        Component[] components = jTabbedPane.getComponents();
        for (int i = 0; i <= jTabbedPane.getSelectedIndex(); i++) {
            if (components[i] instanceof ReportCriteria) {
                ReportCriteria rc = (ReportCriteria) components[i];

                if (!rc.validateSelection()) {
                    frameNotifier.showErrorMessage(rc.getErrorMessage());
                    jTabbedPane.setSelectedComponent(components[i]);                    
                    b = false;

                    break;
                }                
            }
        }
        validate = true;

        return b;
    }

    /** Método donde se limpian todos los campos de la ventana */
    public void clean()
    {
        Component[] components = jTabbedPane.getComponents();
        for (int i = 0; i < components.length; i++) {
            if (components[i] instanceof ReportCriteria) {
                ReportCriteria rc = (ReportCriteria) components[i];
                rc.clear();
            }
        }
        validate = false;
        jTabbedPane.setSelectedIndex(0);
        validate = true;
    }

    /**
     * Inserta un nuevo componente ReportCriteria en el panel de pestañas con el indice seleccionado.
     * @param tabIndex
     * @param reportCriteria
     */
    protected void insertCriteria(int tabIndex, ReportCriteria reportCriteria)
    {
        jTabbedPane.insertTab(reportCriteria.getTabTitle(), null, (Component) reportCriteria, "", tabIndex);
    }

    public FrameNotifier getFrameNotifier()
    {
        return frameNotifier;
    }

    public void setFrameNotifier(FrameNotifier frameNotifier)
    {
        this.frameNotifier = frameNotifier;
    }

    protected abstract AbstractReport createReport();

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameNotifier = new ar.com.init.agros.util.gui.validation.components.FrameNotifier();
        oKCancelCleanPanel = new ar.com.init.agros.util.gui.components.buttons.OKCancelCleanPanel();
        jTabbedPane = new javax.swing.JTabbedPane();
        generateReportPanel = new ar.com.init.agros.reporting.components.GenerateReportPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        frameNotifier.setName("frameNotifier"); // NOI18N

        oKCancelCleanPanel.setName("oKCancelCleanPanel"); // NOI18N

        jTabbedPane.setName("jTabbedPane"); // NOI18N
        jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneStateChanged(evt);
            }
        });

        generateReportPanel.setName("generateReportPanel"); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.com.init.agros.view.Application.class).getContext().getResourceMap(ReportFrame.class);
        jTabbedPane.addTab(resourceMap.getString("generateReportPanel.TabConstraints.tabTitle"), generateReportPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(frameNotifier, javax.swing.GroupLayout.DEFAULT_SIZE, 842, Short.MAX_VALUE)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 842, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(oKCancelCleanPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(frameNotifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oKCancelCleanPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jTabbedPaneStateChanged
    {//GEN-HEADEREND:event_jTabbedPaneStateChanged
        if (validate) {
            if (validateTabs()) {
                frameNotifier.showOkMessage();
            }
        }

        if (generateChart && jTabbedPane.getSelectedComponent() instanceof GenerateReportPanel && jTabbedPane.getTabCount() > 1) {
            oKCancelCleanPanel.setEnabled(false, true, true);
            generateReportPanel.setReport(createReport());
        }
        else {
            oKCancelCleanPanel.setEnabled(true, true, true);           
        }
    }//GEN-LAST:event_jTabbedPaneStateChanged

    /** Método que cierra la ventana y libera los recursos */
    public void closeWindow()
    {
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ar.com.init.agros.util.gui.validation.components.FrameNotifier frameNotifier;
    private ar.com.init.agros.reporting.components.GenerateReportPanel generateReportPanel;
    protected javax.swing.JTabbedPane jTabbedPane;
    private ar.com.init.agros.util.gui.components.buttons.OKCancelCleanPanel oKCancelCleanPanel;
    // End of variables declaration//GEN-END:variables
}
