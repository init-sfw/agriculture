/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.init.agros.view.costos;

import ar.com.init.agros.controller.base.BaseEntityJpaController;
import ar.com.init.agros.model.Divisa;
import ar.com.init.agros.model.MonedaMedida;
import ar.com.init.agros.model.UnidadMedida;
import ar.com.init.agros.model.costo.TipoCosto;
import ar.com.init.agros.model.costo.TipoCosto.TipoTipoCosto;
import ar.com.init.agros.util.gui.validation.components.FrameNotifier;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import ar.com.init.agros.util.gui.AbstractEventControl;
import ar.com.init.agros.util.gui.GUIUtility;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.exception.ConstraintViolationException;
import org.hibernate.validator.InvalidStateException;

/*
 * Clase GUI DialogTipoCosto
 *
 * @author fbobbio
 * @version 07-dic-2009
 */
public class DialogTipoCosto extends javax.swing.JDialog
{

    private EventControl evt;
    private TipoCosto tipoCosto;
    private BaseEntityJpaController<TipoCosto> tipoCostoController;

    public DialogTipoCosto(java.awt.Frame parent)
    {
        this(parent, false, null);
    }

    /** Creates new form DialogTipoCosto */
    public DialogTipoCosto(java.awt.Frame parent, boolean isUpdate, TipoCosto tipoCosto)
    {
        super(parent, true);
        tipoCostoController = new BaseEntityJpaController<TipoCosto>(TipoCosto.class);
        GUIUtility.initWindow(this);
        initComponents();

        if (tipoCosto != null) // Caso en el que no será utilizada como ventana de alta
        {
            setTipoCosto(tipoCosto);
            if (!isUpdate) // Caso en el que será de consulta
            {
                disableFieldsAndButtons();
            }
        }
        evt = new EventControl();
        oKCancelCleanPanel1.setListenerToButtons(evt);
        oKCancelCleanPanel1.setOwner(this);
    }

    public TipoCosto getTipoCosto()
    {
        if (this.tipoCosto == null)
        {
            tipoCosto = new TipoCosto();
        }
        tipoCosto.setNombre(jTextFieldNombre.getText().trim());
        tipoCosto.setDescripcion(jTextAreaDescripcion.getText().trim());
        tipoCosto.setTipo(getTipoTipoCosto());
        tipoCosto.setUnidadMedida(getUnidadMedida());
//        if (tipoCosto.getTipo().equals(TipoTipoCosto.POST_COSECHA))
//        {
//
//        }
        return tipoCosto;
    }

    public void setTipoCosto(TipoCosto tipoCosto)
    {
        jTextFieldNombre.setText(tipoCosto.getNombre());
        jTextAreaDescripcion.setText(tipoCosto.getDescripcion());
        setTipo(tipoCosto.getTipo());
        setUnidad(tipoCosto.getUnidadMedida());
        this.tipoCosto = tipoCosto;
    }

    private void disableFieldsAndButtons()
    {
        jTextAreaDescripcion.setEditable(false);
        jTextFieldNombre.setEditable(false);
        jCheckBoxPostCosecha.setEnabled(false);
        jCheckBoxPulverizacion.setEnabled(false);
        jCheckBoxSiembra.setEnabled(false);
        jCheckBoxCampania.setEnabled(false);
        enableUnidadMedida(false);
    }

    public TipoCosto.TipoTipoCosto getTipoTipoCosto()
    {
        if (jCheckBoxPostCosecha.isSelected()) {
            return TipoCosto.TipoTipoCosto.POST_COSECHA;
        }
        if (jCheckBoxPulverizacion.isSelected()) {
            return TipoCosto.TipoTipoCosto.PULVERIZACION;
        }
        if (jCheckBoxSiembra.isSelected()) {
            return TipoCosto.TipoTipoCosto.SIEMBRA;
        }
        if (jCheckBoxCampania.isSelected())
        {
            return TipoCosto.TipoTipoCosto.CAMPANIA;
        }
        return null;
    }

    public MonedaMedida getUnidadMedida()
    {
        if (jRadioButtonDol.isSelected())         {
            return new MonedaMedida(Divisa.getPatron());
        }
        if (jRadioButtonDolPorHa.isSelected() || unidadSinSeleccion()) {
            return new MonedaMedida(UnidadMedida.getDolarPorHa());
        }
        if (jRadioButtonDolPorQQ.isSelected()) {
            return new MonedaMedida(UnidadMedida.getDolarPorQuintal());
        }
        if (jRadioButtonDolPorTn.isSelected()) {
            return new MonedaMedida(UnidadMedida.getDolarPorTonelada());
        }
        return null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupPertenece = new javax.swing.ButtonGroup();
        buttonGroupUnidadMedida = new javax.swing.ButtonGroup();
        frameNotifier1 = new ar.com.init.agros.util.gui.validation.components.FrameNotifier();
        oKCancelCleanPanel1 = new ar.com.init.agros.util.gui.components.buttons.OKCancelCleanPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxPulverizacion = new javax.swing.JCheckBox();
        jCheckBoxSiembra = new javax.swing.JCheckBox();
        jCheckBoxPostCosecha = new javax.swing.JCheckBox();
        jCheckBoxCampania = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jRadioButtonDolPorHa = new javax.swing.JRadioButton();
        jRadioButtonDolPorTn = new javax.swing.JRadioButton();
        jRadioButtonDolPorQQ = new javax.swing.JRadioButton();
        jRadioButtonDol = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescripcion = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.com.init.agros.view.Application.class).getContext().getResourceMap(DialogTipoCosto.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N

        buttonGroupPertenece.add(jCheckBoxPulverizacion);
        jCheckBoxPulverizacion.setText(resourceMap.getString("jCheckBoxPulverizacion.text")); // NOI18N
        jCheckBoxPulverizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPulverizacionActionPerformed(evt);
            }
        });

        buttonGroupPertenece.add(jCheckBoxSiembra);
        jCheckBoxSiembra.setText(resourceMap.getString("jCheckBoxSiembra.text")); // NOI18N
        jCheckBoxSiembra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSiembraActionPerformed(evt);
            }
        });

        buttonGroupPertenece.add(jCheckBoxPostCosecha);
        jCheckBoxPostCosecha.setText(resourceMap.getString("jCheckBoxPostCosecha.text")); // NOI18N
        jCheckBoxPostCosecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPostCosechaActionPerformed(evt);
            }
        });

        buttonGroupPertenece.add(jCheckBoxCampania);
        jCheckBoxCampania.setText(resourceMap.getString("jCheckBoxCampania.text")); // NOI18N
        jCheckBoxCampania.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCampaniaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCheckBoxPulverizacion)
                    .add(jCheckBoxSiembra)
                    .add(jCheckBoxPostCosecha)
                    .add(jCheckBoxCampania))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jCheckBoxPulverizacion)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBoxSiembra)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBoxPostCosecha)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jCheckBoxCampania))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N

        buttonGroupUnidadMedida.add(jRadioButtonDolPorHa);
        jRadioButtonDolPorHa.setText(resourceMap.getString("jRadioButtonDolPorHa.text")); // NOI18N

        buttonGroupUnidadMedida.add(jRadioButtonDolPorTn);
        jRadioButtonDolPorTn.setText(resourceMap.getString("jRadioButtonDolPorTn.text")); // NOI18N

        buttonGroupUnidadMedida.add(jRadioButtonDolPorQQ);
        jRadioButtonDolPorQQ.setText(resourceMap.getString("jRadioButtonDolPorQQ.text")); // NOI18N

        buttonGroupUnidadMedida.add(jRadioButtonDol);
        jRadioButtonDol.setText(resourceMap.getString("jRadioButtonDol.text")); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jRadioButtonDolPorHa)
                    .add(jRadioButtonDolPorTn)
                    .add(jRadioButtonDolPorQQ)
                    .add(jRadioButtonDol))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jRadioButtonDolPorHa)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonDolPorTn)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonDolPorQQ)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonDol))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N

        jTextAreaDescripcion.setColumns(20);
        jTextAreaDescripcion.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescripcion);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(frameNotifier1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(oKCancelCleanPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextFieldNombre, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(frameNotifier1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTextFieldNombre, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(oKCancelCleanPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxPostCosechaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxPostCosechaActionPerformed
    {//GEN-HEADEREND:event_jCheckBoxPostCosechaActionPerformed
        buttonGroupUnidadMedida.clearSelection();
        jRadioButtonDol.setEnabled(false);
        jRadioButtonDolPorTn.setEnabled(true);
        jRadioButtonDolPorQQ.setEnabled(true);
        jRadioButtonDolPorHa.setEnabled(false);
    }//GEN-LAST:event_jCheckBoxPostCosechaActionPerformed

    private void jCheckBoxSiembraActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxSiembraActionPerformed
    {//GEN-HEADEREND:event_jCheckBoxSiembraActionPerformed
        enableUnidadMedida(false);
        buttonGroupUnidadMedida.clearSelection();
        jRadioButtonDolPorHa.setSelected(true);
    }//GEN-LAST:event_jCheckBoxSiembraActionPerformed

    private void jCheckBoxPulverizacionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxPulverizacionActionPerformed
    {//GEN-HEADEREND:event_jCheckBoxPulverizacionActionPerformed
        enableUnidadMedida(false);
        buttonGroupUnidadMedida.clearSelection();
        jRadioButtonDolPorHa.setSelected(true);
    }//GEN-LAST:event_jCheckBoxPulverizacionActionPerformed

    private void jCheckBoxCampaniaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxCampaniaActionPerformed
    {//GEN-HEADEREND:event_jCheckBoxCampaniaActionPerformed
        enableUnidadMedida(true);
    }//GEN-LAST:event_jCheckBoxCampaniaActionPerformed

    private void enableUnidadMedida(boolean b)
    {
        jRadioButtonDol.setEnabled(b);
        jRadioButtonDolPorTn.setEnabled(b);
        jRadioButtonDolPorQQ.setEnabled(b);
        jRadioButtonDolPorHa.setEnabled(b);
    }

    private void setTipo(TipoTipoCosto tipoTipoCosto)
    {
        if (tipoTipoCosto.equals(TipoCosto.TipoTipoCosto.POST_COSECHA)) {
            jCheckBoxPostCosecha.setSelected(true);
        }
        if (tipoTipoCosto.equals(TipoCosto.TipoTipoCosto.PULVERIZACION)) {
            jCheckBoxPulverizacion.setSelected(true);
        }
        if (tipoTipoCosto.equals(TipoCosto.TipoTipoCosto.SIEMBRA)) {
            jCheckBoxSiembra.setSelected(true);
        }
        if (tipoTipoCosto.equals(TipoCosto.TipoTipoCosto.CAMPANIA))
        {
            jCheckBoxCampania.setSelected(true);
        }
    }

    private void setUnidad(MonedaMedida unidadMedida)
    {
        if (unidadMedida.getDivisa() != null) {
            jRadioButtonDol.setSelected(true);
        }
        else {
            if (unidadMedida.getUnidad().equals(UnidadMedida.getDolarPorHa())) {
                jRadioButtonDolPorHa.setSelected(true);
            }
            if (unidadMedida.getUnidad().equals(UnidadMedida.getDolarPorQuintal())) {
                jRadioButtonDolPorQQ.setSelected(true);
            }
            if (unidadMedida.getUnidad().equals(UnidadMedida.getDolarPorTonelada())) {
                jRadioButtonDolPorTn.setSelected(true);
            }
        }
    }

    /** Método que devuelve true si no hay ninguna unidad seleccionada y no está seleccionado el tipo de costo de post cosecha */
    private boolean unidadSinSeleccion()
    {
        if (buttonGroupUnidadMedida.getSelection() == null && !jCheckBoxPostCosecha.isSelected())
        {
            return true;
        }
        return false;
    }

    /** Clase de control de eventos que maneja los eventos de la GUI DialogTipoCosto y las validaciones de la misma */
    public class EventControl extends AbstractEventControl implements ActionListener
    {

        /** Método que maneja los eventos de la GUI DialogTipoCosto
         *  @param e el evento de acción lanzado por algún componente de la GUI
         */
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (e.getSource() == oKCancelCleanPanel1.getBtnCancelar()) {
                closeWindow(DialogTipoCosto.this);
            }
            if (e.getSource() == oKCancelCleanPanel1.getBtnClean()) {
                clear();
                frameNotifier1.showOkMessage();
            }
            if (e.getSource() == oKCancelCleanPanel1.getBtnAceptar()) {
                if (validateInput(getTipoCosto()))
                {
                    try
                    {
                        tipoCostoController.persistOrUpdate(tipoCosto);
                        frameNotifier1.showInformationMessage(
                                "Se registró con éxito el tipo de costo " + tipoCosto.getNombre());
                        clear();
                        pack();
                    }
                    catch (ConstraintViolationException ex) {
                        frameNotifier1.showErrorMessage(
                                "Ya existe un tipo de costo con el nombre " + tipoCosto.getNombre());
                        tipoCostoController.refreshEntity(tipoCosto);
                    }
                    catch (InvalidStateException ex) {
                        frameNotifier1.showErrorMessage(ex.getMessage());
                        Logger.getLogger(DialogTipoCosto.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    catch (Exception ex) {
                        frameNotifier1.showErrorMessage(ex.getMessage());
                        Logger.getLogger(DialogTipoCosto.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

        @Override
        public FrameNotifier getFrameNotifier()
        {
            return frameNotifier1;
        }
    }

    public void clear()
    {
        jTextAreaDescripcion.setText("");
        jTextFieldNombre.setText("");
        buttonGroupPertenece.clearSelection();
        buttonGroupUnidadMedida.clearSelection();
        tipoCosto = null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupPertenece;
    private javax.swing.ButtonGroup buttonGroupUnidadMedida;
    private ar.com.init.agros.util.gui.validation.components.FrameNotifier frameNotifier1;
    private javax.swing.JCheckBox jCheckBoxCampania;
    private javax.swing.JCheckBox jCheckBoxPostCosecha;
    private javax.swing.JCheckBox jCheckBoxPulverizacion;
    private javax.swing.JCheckBox jCheckBoxSiembra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButtonDol;
    private javax.swing.JRadioButton jRadioButtonDolPorHa;
    private javax.swing.JRadioButton jRadioButtonDolPorQQ;
    private javax.swing.JRadioButton jRadioButtonDolPorTn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaDescripcion;
    private javax.swing.JTextField jTextFieldNombre;
    private ar.com.init.agros.util.gui.components.buttons.OKCancelCleanPanel oKCancelCleanPanel1;
    // End of variables declaration//GEN-END:variables
}
