/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ar.com.init.agros.view.ingresos;


import ar.com.init.agros.controller.base.BaseEntityJpaController;
import ar.com.init.agros.model.ingreso.TipoIngreso;
import ar.com.init.agros.util.gui.validation.components.FrameNotifier;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import ar.com.init.agros.util.gui.AbstractEventControl;
import ar.com.init.agros.util.gui.GUIUtility;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.exception.ConstraintViolationException;
import org.hibernate.validator.InvalidStateException;

 /*
  * Clase GUI DialogTipoIngreso
  *
  * @author fbobbio
  * @version 04-dic-2009
  */
public class DialogTipoIngreso extends javax.swing.JDialog
{
    private EventControl evt;
    private TipoIngreso tipoIngreso;
    private BaseEntityJpaController<TipoIngreso> tipoIngresoController;

    public DialogTipoIngreso(java.awt.Frame parent)
    {
        this(parent,false,null);
    }

    /** Creates new form DialogTipoIngreso */
    public DialogTipoIngreso(java.awt.Frame parent, boolean isUpdate,TipoIngreso tipoIngreso)
    {
        super(parent, true);
        tipoIngresoController = new BaseEntityJpaController<TipoIngreso>(TipoIngreso.class);
        GUIUtility.initWindow(this);
        initComponents();

        if (tipoIngreso != null) // Caso en el que no será utilizada como ventana de alta
        {
            setTipoIngreso(tipoIngreso);
            if (!isUpdate) // Caso en el que será de consulta
            {
                disableFieldsAndButtons();
            }
        }
        evt = new EventControl();
        oKCancelCleanPanel.setListenerToButtons(evt);
        oKCancelCleanPanel.setOwner(this);
    }

    public TipoIngreso getTipoIngreso()
    {
        if (this.tipoIngreso == null)
        {
            tipoIngreso = new TipoIngreso();
        }

        tipoIngreso.setNombre(jTextFieldNombre.getText().trim());
        tipoIngreso.setDescripcion(jTextAreaDescripcion.getText().trim());
        if (!jCheckBoxDolares.isSelected() && !jCheckBoxDolaresPorHa.isSelected())
        {
            frameNotifier1.showErrorMessage("Seleccione el tipo de valor que se va a ingresar en este tipo de ingreso");
            tipoIngreso = null;
            return tipoIngreso;
        }
        if (jCheckBoxDolares.isSelected())
        {
            tipoIngreso.setDolarPorHectarea(false);
        }
        else
        {
            tipoIngreso.setDolarPorHectarea(true);
        }
        return tipoIngreso;
    }

    public void setTipoIngreso(TipoIngreso tipoIngreso)
    {
        jTextFieldNombre.setText(tipoIngreso.getNombre());
        jTextAreaDescripcion.setText(tipoIngreso.getDescripcion());
        if(tipoIngreso.isDolarPorHectarea())
        {
            jCheckBoxDolaresPorHa.setSelected(true);
        }
        else
        {
            jCheckBoxDolares.setSelected(true);
        }
        this.tipoIngreso = tipoIngreso;
    }

    private void disableFieldsAndButtons()
    {
        jTextAreaDescripcion.setEditable(false);
        jTextFieldNombre.setEditable(false);
        jCheckBoxDolares.setEnabled(false);
        jCheckBoxDolaresPorHa.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        frameNotifier1 = new ar.com.init.agros.util.gui.validation.components.FrameNotifier();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescripcion = new javax.swing.JTextArea();
        oKCancelCleanPanel = new ar.com.init.agros.util.gui.components.buttons.OKCancelCleanPanel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxDolares = new javax.swing.JCheckBox();
        jCheckBoxDolaresPorHa = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.com.init.agros.view.Application.class).getContext().getResourceMap(DialogTipoIngreso.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N

        jTextAreaDescripcion.setColumns(20);
        jTextAreaDescripcion.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescripcion);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N

        buttonGroup1.add(jCheckBoxDolares);
        jCheckBoxDolares.setText(resourceMap.getString("jCheckBoxDolares.text")); // NOI18N

        buttonGroup1.add(jCheckBoxDolaresPorHa);
        jCheckBoxDolaresPorHa.setText(resourceMap.getString("jCheckBoxDolaresPorHa.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(oKCancelCleanPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addContainerGap(112, Short.MAX_VALUE))
            .add(frameNotifier1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jCheckBoxDolares)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jCheckBoxDolaresPorHa))
                    .add(jTextFieldNombre, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(frameNotifier1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTextFieldNombre, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jCheckBoxDolares)
                    .add(jCheckBoxDolaresPorHa))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(oKCancelCleanPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Clase de control de eventos que maneja los eventos de la GUI DialogTipoIngreso y las validaciones de la misma */
    public class EventControl extends AbstractEventControl implements ActionListener
    {
        /** Método que maneja los eventos de la GUI DialogTipoIngreso
         *  @param e el evento de acción lanzado por algún componente de la GUI
         */
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (e.getSource() == oKCancelCleanPanel.getBtnCancelar())
            {
                closeWindow(DialogTipoIngreso.this);
            }
            if (e.getSource() == oKCancelCleanPanel.getBtnClean())
            {
                clear();
                frameNotifier1.showOkMessage();
            }
            if (e.getSource() == oKCancelCleanPanel.getBtnAceptar())
            {
                getTipoIngreso();
                if (tipoIngreso != null && validateInput(tipoIngreso))
                {
                    try
                    {
                        tipoIngresoController.persistOrUpdate(tipoIngreso);
                        frameNotifier1.showInformationMessage(
                                "Se registró con éxito el tipo de ingreso " + tipoIngreso.getNombre());
                        clear();
                        pack();
                    }
                    catch (ConstraintViolationException ex)
                    {
                        frameNotifier1.showErrorMessage("Ya existe un tipo de ingreso con el nombre " + tipoIngreso.getNombre());
                        tipoIngresoController.refreshEntity(tipoIngreso);
                    }
                    catch (InvalidStateException ex)
                    {
                        frameNotifier1.showErrorMessage(ex.getMessage());
                        Logger.getLogger(DialogTipoIngreso.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    catch (Exception ex)
                    {
                        frameNotifier1.showErrorMessage(ex.getMessage());
                        Logger.getLogger(DialogTipoIngreso.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

        @Override
        public FrameNotifier getFrameNotifier()
        {
            return frameNotifier1;
        }
    }

    public void clear()
    {
        jTextAreaDescripcion.setText("");
        jTextFieldNombre.setText("");
        buttonGroup1.clearSelection();
        tipoIngreso = null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private ar.com.init.agros.util.gui.validation.components.FrameNotifier frameNotifier1;
    private javax.swing.JCheckBox jCheckBoxDolares;
    private javax.swing.JCheckBox jCheckBoxDolaresPorHa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaDescripcion;
    private javax.swing.JTextField jTextFieldNombre;
    private ar.com.init.agros.util.gui.components.buttons.OKCancelCleanPanel oKCancelCleanPanel;
    // End of variables declaration//GEN-END:variables

}
