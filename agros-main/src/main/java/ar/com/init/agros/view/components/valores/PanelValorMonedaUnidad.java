/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelValorMonedaUnidad.java
 *
 * Created on 15/06/2009, 14:13:35
 */
package ar.com.init.agros.view.components.valores;

import ar.com.init.agros.model.MagnitudEnum;
import ar.com.init.agros.model.UnidadMedida;
import ar.com.init.agros.model.ValorMoneda;
import ar.com.init.agros.model.ValorMonedaMedida;
import ar.com.init.agros.util.gui.GUIUtility;
import ar.com.init.agros.util.gui.validation.components.FrameNotifier;
import ar.com.init.agros.view.components.FocusPanelValorMonedaListener;
import ar.com.init.agros.view.components.FocusPanelValorMonedaUnidadListener;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.PersistenceException;
import javax.swing.InputVerifier;
import javax.swing.JTextField;

/**
 *
 * @author gmatheu
 */
public class PanelValorMonedaUnidad extends javax.swing.JPanel implements FocusPanelValorMonedaListener
{
    private static final long serialVersionUID = -1L;
    private ValorMonedaMedida valorMonedaMedida;
    private FrameNotifier frameNotifier;
    private List<FocusPanelValorMonedaUnidadListener> focusListeners;

    /** Creates new form PanelValorMonedaUnidad */
    public PanelValorMonedaUnidad()
    {
        initComponents();
        panelValorMoneda.addFocusPanelValorMonedaListener(this);

        try {
            refreshUnidades();
        }
        catch (PersistenceException e) {
            if (frameNotifier != null) {
                frameNotifier.showErrorMessage(e.getLocalizedMessage());
            }
            GUIUtility.logPersistenceError(PanelValorMonedaUnidad.class, e);
        }
    }

    public void clear()
    {
        valorMonedaMedida = null;
        GUIUtility.cleanJComboBox(jComboBoxUnidad);
        panelValorMoneda.clear();
    }

    public void clearImporte()
    {
        valorMonedaMedida = null;
        panelValorMoneda.clear();
    }

    public void showUnidadesPorMagnitud(MagnitudEnum magnitud)
    {
        GUIUtility.refreshComboBox(unidadMedidaJpaController.findByMagnitud(magnitud), jComboBoxUnidad);
    }

    public void selectUnidad(Object unidad)
    {
        if (unidad instanceof UnidadMedida)
        {
            jComboBoxUnidad.setSelectedItem(unidad);
        }
        else
        {
            jComboBoxUnidad.setSelectedIndex(0);
        }
    }

    public void refreshUnidades()
    {
        GUIUtility.refreshComboBox(unidadMedidaJpaController.findEntities(), jComboBoxUnidad);
    }

    public JTextField getjTextFieldMonto()
    {
        return panelValorMoneda.getjTextFieldMonto();
    }

    public ValorMonedaMedida getValorMonedaMedida()
    {
        if (valorMonedaMedida == null) {
            valorMonedaMedida = new ValorMonedaMedida();
        }

        Object unidad = jComboBoxUnidad.getSelectedItem();

        if (unidad instanceof UnidadMedida) {
            valorMonedaMedida.setUnidad((UnidadMedida) unidad);
        }
        else {
            valorMonedaMedida.setUnidad(null);
        }

        valorMonedaMedida.setValorMoneda(panelValorMoneda.getValorMoneda());

        if (!valorMonedaMedida.isValid()) {
            return null;
        }

        return valorMonedaMedida;
    }

    public void setEnabled(boolean text, boolean combo)
    {
        jComboBoxUnidad.setEnabled(false);
        panelValorMoneda.setEnabled(text);
    }

    public void setValorMonedaMedida(ValorMonedaMedida valor)
    {
        panelValorMoneda.setValorMoneda(valor.toValorMoneda());
        setSelectedUnidad(valor.getUnidad());
        valorMonedaMedida = valor;
    }

    public void setSelectedUnidad(UnidadMedida unidad)
    {
        jComboBoxUnidad.setSelectedItem(unidad);
    }

    public FrameNotifier getFrameNotifier()
    {
        return frameNotifier;
    }

    public void setFrameNotifier(FrameNotifier frameNotifier)
    {
        this.frameNotifier = frameNotifier;
        this.panelValorMoneda.setFrameNotifier(frameNotifier);
    }

    @Override
    public InputVerifier getInputVerifier()
    {
        return this.panelValorMoneda.getInputVerifier();
    }

    @Override
    public void setInputVerifier(InputVerifier inputVerifier)
    {
        this.panelValorMoneda.setInputVerifier(inputVerifier);
    }

    public boolean verify()
    {
       return panelValorMoneda.verify();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listableComboBoxRenderer = new ar.com.init.agros.util.gui.ListableComboBoxRenderer();
        unidadMedidaJpaController = new ar.com.init.agros.controller.UnidadMedidaJpaController();
        panelValorMoneda = new ar.com.init.agros.view.components.valores.PanelValorMoneda();
        jComboBoxUnidad = new javax.swing.JComboBox();
        jLabelPor = new javax.swing.JLabel();

        jComboBoxUnidad.setRenderer(listableComboBoxRenderer);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.com.init.agros.view.Application.class).getContext().getResourceMap(PanelValorMonedaUnidad.class);
        jLabelPor.setText(resourceMap.getString("jLabelPor.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelValorMoneda, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addComponent(jLabelPor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxUnidad, 0, 95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelPor))
                    .addComponent(panelValorMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxUnidad;
    private javax.swing.JLabel jLabelPor;
    private ar.com.init.agros.util.gui.ListableComboBoxRenderer listableComboBoxRenderer;
    private ar.com.init.agros.view.components.valores.PanelValorMoneda panelValorMoneda;
    private ar.com.init.agros.controller.UnidadMedidaJpaController unidadMedidaJpaController;
    // End of variables declaration//GEN-END:variables
/** Método que se encarga de añadir un listener de cambio de selección de superficie
     *  @param listener el objeto que depende del sujeto
     */
    public void addFocusPanelValorMonedaUnidadListener(FocusPanelValorMonedaUnidadListener listener)
    {
        if (listener == null)
        {
            return;
        }
        if (focusListeners == null || focusListeners.size() == 0)
        {
            focusListeners = new ArrayList<FocusPanelValorMonedaUnidadListener>();
        }
        focusListeners.add(listener);
    }

    public boolean removeFocusPanelValorMonedaUnidadListener(FocusPanelValorMonedaUnidadListener listener)
    {
        if (focusListeners == null || focusListeners.size() == 0)
        {
            return false;
        }
        else
        {
            return focusListeners.remove(listener);
        }
    }

    public void notifyFocusPanelValorMonedaUnidadListeners()
    {
        for (int i = 0; focusListeners != null && i < focusListeners.size(); i++)
        {
            if (focusListeners.get(i) != null)
            {
                focusListeners.get(i).focusLost(getValorMonedaMedida());
            }
        }
    }

    @Override
    public void focusLost(ValorMoneda valorMoneda)
    {
        notifyFocusPanelValorMonedaUnidadListeners();
    }
}
